{"version":3,"sources":["webpack://university-webapp/./server/context/isAuth.ts","webpack://university-webapp/./server/modules/messageTypes.ts","webpack://university-webapp/./server/schema/helpers/randomColor.ts","webpack://university-webapp/./server/schema/helpers/upload.ts","webpack://university-webapp/./server/schema/index.ts","webpack://university-webapp/./server/schema/models/ExtraLink.ts","webpack://university-webapp/./server/schema/models/Filter.ts","webpack://university-webapp/./server/schema/models/NewsEvent.ts","webpack://university-webapp/./server/schema/models/Page.ts","webpack://university-webapp/./server/schema/models/PageSection.ts","webpack://university-webapp/./server/schema/models/Upload.ts","webpack://university-webapp/./server/schema/models/User.ts","webpack://university-webapp/./server/schema/models/index.ts","webpack://university-webapp/./server/schema/resolvers/email.ts","webpack://university-webapp/./server/schema/resolvers/filters.ts","webpack://university-webapp/./server/schema/resolvers/newsevent.ts","webpack://university-webapp/./server/schema/resolvers/newsevents.ts","webpack://university-webapp/./server/schema/resolvers/pages.ts","webpack://university-webapp/./server/schema/resolvers/pagesection.ts","webpack://university-webapp/./server/schema/resolvers/pagesections.ts","webpack://university-webapp/./server/schema/resolvers/upload.ts","webpack://university-webapp/./server/schema/resolvers/uploads.ts","webpack://university-webapp/./server/schema/resolvers/users.ts","webpack://university-webapp/./server/schema/typeDefs.ts","webpack://university-webapp/./server/schema/validation/auth.ts","webpack://university-webapp/./server/schema/validation/email.ts","webpack://university-webapp/./server/schema/validation/newsEvents.ts","webpack://university-webapp/./server/schema/validation/pageSections.ts","webpack://university-webapp/./server/schema/validation/snippets.ts","webpack://university-webapp/external \"@babel/runtime/helpers/asyncToGenerator\"","webpack://university-webapp/external \"@babel/runtime/helpers/defineProperty\"","webpack://university-webapp/external \"@babel/runtime/helpers/taggedTemplateLiteral\"","webpack://university-webapp/external \"@babel/runtime/regenerator\"","webpack://university-webapp/external \"@sentry/node\"","webpack://university-webapp/external \"apollo-server\"","webpack://university-webapp/external \"apollo-server-express\"","webpack://university-webapp/external \"aws-sdk\"","webpack://university-webapp/external \"bcryptjs\"","webpack://university-webapp/external \"cors\"","webpack://university-webapp/external \"dotenv\"","webpack://university-webapp/external \"express\"","webpack://university-webapp/external \"imagemin\"","webpack://university-webapp/external \"imagemin-mozjpeg\"","webpack://university-webapp/external \"jsonwebtoken\"","webpack://university-webapp/external \"mongoose\"","webpack://university-webapp/external \"nodemailer\"","webpack://university-webapp/external \"path\"","webpack://university-webapp/external \"sharp\"","webpack://university-webapp/external \"uuid\"","webpack://university-webapp/webpack/bootstrap","webpack://university-webapp/webpack/runtime/compat get default export","webpack://university-webapp/webpack/runtime/define property getters","webpack://university-webapp/webpack/runtime/hasOwnProperty shorthand","webpack://university-webapp/webpack/runtime/make namespace object","webpack://university-webapp/./server/index.ts"],"names":["config","JWT_SECRET","process","env","isAuth","req","auth","headers","authorization","authDenied","token","split","decodedToken","jwt","userId","error","types","success","keyWord","warning","getColor","letters","color","i","Math","floor","random","AWS_ID","AWS_SECRET","s3","AWS","accessKeyId","secretAccessKey","getInitParams","filename","createReadStream","Bucket","ACL","Key","uuidv4","Body","Conditions","acl","deleteFileBucket","fileKey","deleteObject","promise","convertToJpg","input","sharp","jpeg","toBuffer","getKeyPath","path","slice","lastIndexOf","length","uploadBuffer","buffer","imagemin","plugins","mozjpeg","quality","miniBuffer","params","upload","Location","Error","message","getBufferFromStream","readableStream","buffers","Promise","res","on","chunk","push","Buffer","concat","err","Sentry","uploadNoImage","stream","uploadFile","file","isImage","mimetype","deleteFile","updateFile","schema","typeDefs","resolvers","Query","QUsers","QPages","QUploads","QNewsEvents","QPageSections","QFilters","Mutation","MEmail","MPages","MUploads","MNewsEvents","MPageSections","MUsers","UploadFile","NewsEvent","PageSection","Schema","link","type","String","required","label","content","Types","ref","date","Date","lang","model","page","url","section","value","title","owner","category","dateEvent","unique","image","imageKey","priority","Number","filters","location","ObjectId","key","description","hashtags","format","email","password","ava","confirmed","Boolean","firstname","lastname","middlename","phone","address","birth","encrpassword","role","sendEmail","_","postEmailValid","vFirstname","vLastname","vEmail","vMessage","isError","JSON","stringify","output","transporter","nodemailer","service","user","EMAIL_FROM","pass","EMAIL_FROM_PASS","tls","rejectUnauthorized","sendMail","from","to","EMAIL_TO","subject","text","html","response","getFilters","Filter","User","links","_id","ExtraLink","preview","Upload","UPLOADS","getNewsEvents","search","dateFrom","dateTo","exceptId","searchQuery","$text","$search","rangeDates","$gte","$lte","$exists","query","$ne","skip","limit","sort","newsEvents","countDocuments","quantity","items","getNewsEvent","contentId","newsEvent","createNewsEvent","createEditValid","vTitle","vContent","vDateEvent","toISOString","save","newNewsEvent","extraLink","editNewsEvent","msgTypes","deleteNewsEvent","images","UPLOAD","getPage","Page","setPageImage","uploadImage","deleting","newPage","uploads","getAllPageSections","urls","$in","pageSections","getPageSections","collection","populate","match","sections","colectionTemp","forEach","item","collectionNew","j","index","map","searchContent","tags","keyWords","news","events","other","includes","pagesection","getPageSection","sectionId","createPageSection","optContent","undefined","vPriority","vUrl","errors","msg","Object","keys","savedPage","pageCollection","newSection","filter","newFilter","editPageSection","filterId","deletePageSection","getImages","typeQuery","getImage","imageId","getContentImages","createUpload","isImgFormat","imageValid","fileType","editUpload","fileLocation","deleteUpload","register","args","registerValid","validatedFields","salt","bcrypt","hash","isAdmin","newUser","id","AuthenticationError","login","loginValid","instance","getUser","getAllUsers","__","users","setUserAva","updateUserData","newPassword","newEncrpassword","gql","fields","fieldsMod","field","isEmpty","isEmail","isLength","min","max","minMsg","maxMsg","isUnique","errorMsg","setError","isContains","emailVerified","comparePassword","passwordVerified","isSimilar","resultVerification","trim","patern","Model","prop","find","findOne","hashedPassword","isValidPass","PORT","MONGO_URI","NODE_ENV","isDev","app","express","use","cors","mongoose","useCreateIndex","useNewUrlParser","useUnifiedTopology","useFindAndModify","console","log","server","ApolloServer","playground","context","applyMiddleware","__dirname","get","sendFile","listen"],"mappings":"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","file":"server.js","sourcesContent":["import jwt from \"jsonwebtoken\"\r\nimport { config } from \"dotenv\"\r\nconfig()\r\nconst { JWT_SECRET }: any = process.env\r\n\r\nconst isAuth = (req: { headers: { authorization: any } }) => {\r\n  const auth = req && req.headers && req.headers.authorization\r\n  const authDenied = { auth: false }\r\n  if (!auth) {\r\n    return authDenied\r\n  }\r\n\r\n  const token = auth.split(\" \")[1]\r\n  if (!token) {\r\n    return authDenied\r\n  }\r\n\r\n  let decodedToken: string\r\n  try {\r\n    const { userId }: any = jwt.verify(token, JWT_SECRET)\r\n    decodedToken = userId\r\n  } catch (error) {\r\n    return authDenied\r\n  }\r\n  if (!decodedToken) {\r\n    return authDenied\r\n  }\r\n\r\n  return { auth: true, userId: decodedToken }\r\n}\r\n\r\nexport default isAuth\r\n","export const types = {\r\n  success: {\r\n    keyWord: \"success\",\r\n  },\r\n  warning: {\r\n    keyWord: \"warning\",\r\n  },\r\n  error: {\r\n    keyWord: \"error\",\r\n  },\r\n}\r\n","export const getColor = () => {\r\n  const letters = \"0123456789ABCDEF\"\r\n  let color = \"#\"\r\n  for (let i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)]\r\n  }\r\n  return color\r\n}\r\n","import sharp from \"sharp\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport * as Sentry from \"@sentry/node\"\r\nimport imagemin from \"imagemin\"\r\nimport mozjpeg from \"imagemin-mozjpeg\"\r\nimport { config } from \"dotenv\"\r\nimport AWS from \"aws-sdk\"\r\nconfig()\r\nconst { AWS_ID, AWS_SECRET } = process.env\r\n\r\nconst s3 = new AWS.S3({\r\n  accessKeyId: AWS_ID,\r\n  secretAccessKey: AWS_SECRET,\r\n})\r\n\r\nconst getInitParams = (\r\n  filename: string,\r\n  createReadStream: any,\r\n  Bucket: string\r\n) => {\r\n  return {\r\n    ACL: \"public-read\",\r\n    Bucket,\r\n    Key: `${uuidv4()}.${filename}`,\r\n    Body: createReadStream,\r\n    Conditions: [{ acl: \"public-read\" }],\r\n  }\r\n}\r\n\r\nconst deleteFileBucket = async (fileKey: string, Bucket: string) => {\r\n  if (fileKey) {\r\n    // @ts-ignore\r\n    await s3\r\n      .deleteObject({\r\n        Key: fileKey,\r\n        Bucket,\r\n      })\r\n      .promise()\r\n  }\r\n}\r\n\r\nconst convertToJpg = async (input: Buffer) => {\r\n  return sharp(input).jpeg().toBuffer()\r\n}\r\n\r\nconst getKeyPath = (path: string) => {\r\n  return path.slice(path.lastIndexOf(\"/\") + 1, path.length)\r\n}\r\n\r\nexport const uploadBuffer = async (\r\n  buffer: Buffer,\r\n  filename: string,\r\n  Bucket: string\r\n) => {\r\n  try {\r\n    const miniBuffer = await imagemin.buffer(buffer, {\r\n      plugins: [convertToJpg, mozjpeg({ quality: 50 })],\r\n    })\r\n\r\n    const params: any = getInitParams(\r\n      `${filename.slice(0, filename.lastIndexOf(\".\"))}.jpeg`,\r\n      miniBuffer,\r\n      Bucket\r\n    )\r\n    const { Location } = await s3.upload(params).promise()\r\n\r\n    return Location\r\n  } catch (error) {\r\n    throw new Error(`Uploading buffer to bucket error: ${error.message}`)\r\n  }\r\n}\r\n\r\nconst getBufferFromStream = async (readableStream: any) => {\r\n  try {\r\n    const buffers: Uint8Array[] = []\r\n\r\n    const buffer = await new Promise<Buffer | null>(async (res) =>\r\n      readableStream\r\n        .createReadStream()\r\n        .on(\"data\", (chunk: any) => {\r\n          buffers.push(chunk)\r\n        })\r\n        .on(\"end\", () => {\r\n          res(Buffer.concat(buffers))\r\n        })\r\n        .on(\"error\", (err: any) => {\r\n          Sentry.captureException(err)\r\n          res(null)\r\n        })\r\n    )\r\n\r\n    return buffer\r\n  } catch (error) {\r\n    throw new Error(`Creating buffer error: ${error.message}`)\r\n  }\r\n}\r\n\r\nconst uploadNoImage = async (readableStream: any, Bucket: string) => {\r\n  try {\r\n    const stream = readableStream.createReadStream()\r\n\r\n    const params: any = getInitParams(readableStream.filename, stream, Bucket)\r\n    const { Location } = await s3.upload(params).promise()\r\n\r\n    return Location\r\n  } catch (error) {\r\n    throw new Error(`Uploading file to bucket error: ${error.message}`)\r\n  }\r\n}\r\n\r\nexport const uploadFile = async (file: any, Bucket: string) => {\r\n  try {\r\n    const readableStream = await file\r\n    const isImage = readableStream.mimetype.split(\"/\")[0] === \"image\"\r\n\r\n    if (isImage) {\r\n      const buffer = await getBufferFromStream(readableStream)\r\n\r\n      if (!buffer) {\r\n        throw new Error(`Getting buffer from stream error!`)\r\n      }\r\n\r\n      return uploadBuffer(buffer, readableStream.filename, Bucket)\r\n    } else {\r\n      return uploadNoImage(readableStream, Bucket)\r\n    }\r\n  } catch (error) {\r\n    throw new Error(`Uploading file error: ${error.message}`)\r\n  }\r\n}\r\n\r\nexport const deleteFile = async (path: string, Bucket: string) => {\r\n  try {\r\n    await deleteFileBucket(getKeyPath(path), Bucket)\r\n  } catch (error) {\r\n    throw new Error(`Deleting file error: ${error.message}`)\r\n  }\r\n}\r\n\r\nexport const updateFile = async (path: string, file: any, Bucket: string) => {\r\n  try {\r\n    await deleteFile(path, Bucket)\r\n    return uploadFile(file, Bucket)\r\n  } catch (error) {\r\n    throw new Error(`Updating file error: ${error.message}`)\r\n  }\r\n}\r\n","import typeDefs from \"./typeDefs\"\r\nimport { Query as QUsers, Mutation as MUsers } from \"./resolvers/users\"\r\nimport { Query as QPages, Mutation as MPages } from \"./resolvers/pages\"\r\nimport { Query as QUploads, Mutation as MUploads } from \"./resolvers/uploads\"\r\nimport {\r\n  Query as QNewsEvents,\r\n  Mutation as MNewsEvents,\r\n} from \"./resolvers/newsevents\"\r\nimport {\r\n  Query as QPageSections,\r\n  Mutation as MPageSections,\r\n} from \"./resolvers/pagesections\"\r\nimport { Query as QFilters } from \"./resolvers/filters\"\r\nimport { UploadFile } from \"./resolvers/upload\"\r\nimport { NewsEvent } from \"./resolvers/newsevent\"\r\nimport { PageSection } from \"./resolvers/pagesection\"\r\nimport { Mutation as MEmail } from \"./resolvers/email\"\r\n\r\nconst schema = {\r\n  typeDefs,\r\n  resolvers: {\r\n    Query: {\r\n      ...QUsers,\r\n      ...QPages,\r\n      ...QUploads,\r\n      ...QNewsEvents,\r\n      ...QPageSections,\r\n      ...QFilters,\r\n    },\r\n    Mutation: {\r\n      ...MEmail,\r\n      ...MPages,\r\n      ...MUploads,\r\n      ...MNewsEvents,\r\n      ...MPageSections,\r\n      ...MUsers,\r\n    },\r\n    UploadFile,\r\n    NewsEvent,\r\n    PageSection,\r\n  },\r\n}\r\n\r\nexport default schema\r\n","import { Schema, model, Types } from \"mongoose\";\r\n\r\nconst schema = new Schema({\r\n  link: { type: String, required: true },\r\n  label: { type: String, required: true },\r\n  content: { type: Types.ObjectId, ref: \"NewsEvent\", required: true },\r\n  date: { type: Date, required: true },\r\n  lang: { type: String, default: \"uk\" },\r\n});\r\n\r\nexport default model(\"ExtraLink\", schema);\r\n","import { Schema, model, Types } from \"mongoose\";\r\n\r\nconst schema = new Schema({\r\n  page: { type: Types.ObjectId, ref: \"Page\", required: true },\r\n  url: { type: String, required: true },\r\n  section: { type: Types.ObjectId, ref: \"PageSection\", required: true },\r\n  keyWord: { type: String, required: true },\r\n  value: { type: String, required: true },\r\n  date: { type: Date, required: true },\r\n  lang: { type: String, default: \"uk\" },\r\n});\r\n\r\nexport default model(\"Filter\", schema);\r\n","import { Schema, model, Types } from \"mongoose\";\r\n\r\nconst schema = new Schema({\r\n  title: { type: String, required: true },\r\n  content: { type: String, required: true },\r\n  type: { type: String, enum: [\"news\", \"event\"], required: true },\r\n  owner: { type: Types.ObjectId, ref: \"User\", required: true },\r\n  date: { type: String, required: true },\r\n  category: {\r\n    type: String,\r\n    enum: [\r\n      \"ecology\",\r\n      \"health\",\r\n      \"sports\",\r\n      \"science\",\r\n      \"entertainment\",\r\n      \"culture\",\r\n    ],\r\n    required: true,\r\n  },\r\n  dateEvent: { type: String, required: true },\r\n  lang: { type: String, default: \"uk\" },\r\n});\r\n\r\nexport default model(\"NewsEvent\", schema);\r\n","import { Schema, model } from \"mongoose\"\r\n\r\nconst schema = new Schema({\r\n  url: { type: String, required: true, unique: true },\r\n  image: { type: String, default: \"\" },\r\n  imageKey: { type: String, default: \"\" },\r\n  date: { type: Date, required: true },\r\n})\r\n\r\nexport default model(\"Page\", schema)\r\n","import { Schema, model, Types } from \"mongoose\";\r\n\r\nconst schema = new Schema({\r\n  page: { type: Types.ObjectId, ref: \"Page\", required: true },\r\n  url: { type: String, required: true },\r\n  title: { type: String, required: true },\r\n  content: { type: String },\r\n  priority: { type: Number, required: true },\r\n  owner: { type: Types.ObjectId, ref: \"User\", required: true },\r\n  filters: [{ type: Types.ObjectId, ref: \"Filter\", required: true }],\r\n  date: { type: Date, required: true },\r\n  lang: { type: String, default: \"uk\" },\r\n});\r\n\r\nexport default model(\"PageSection\", schema);\r\n","import { Schema, model, Types } from \"mongoose\"\r\n\r\nconst schema = new Schema({\r\n  owner: { type: Types.ObjectId, ref: \"User\", required: true },\r\n  date: { type: Date, required: true },\r\n  location: { type: String, required: true },\r\n  content: { type: Types.ObjectId },\r\n  type: {\r\n    type: String,\r\n    enum: [\"image\", \"news\", \"event\", \"other\", \"private\"],\r\n    required: true,\r\n  },\r\n  key: { type: String, default: \"\" },\r\n  description: { type: String, default: \"\" },\r\n  hashtags: { type: String, default: \"\" },\r\n  format: { type: String, enum: [\"image\", \"file\"], default: \"image\" },\r\n})\r\n\r\nexport default model(\"Upload\", schema)\r\n","import { Schema, model, Types } from \"mongoose\"\r\n\r\nconst schema = new Schema({\r\n  email: { type: String, unique: true, required: true },\r\n  password: { type: String, required: true },\r\n  ava: {\r\n    type: String,\r\n    default: \"\",\r\n  },\r\n  color: { type: String, required: true, default: \"\" },\r\n  confirmed: { type: Boolean, required: true, default: \"false\" },\r\n  firstname: { type: String, default: \"\", required: true },\r\n  lastname: { type: String, default: \"\", required: true },\r\n  middlename: { type: String, default: \"\" },\r\n  phone: { type: String, default: \"\" },\r\n  address: { type: String, default: \"\" },\r\n  birth: { type: Date, default: \"\" },\r\n  encrpassword: { type: String, required: true },\r\n  role: {\r\n    type: String,\r\n    required: true,\r\n    default: \"user\",\r\n    enum: [\"user\", \"admin\", \"teacher\"],\r\n  },\r\n  date: { type: Date, required: true },\r\n})\r\n\r\nexport default model(\"User\", schema)\r\n","import User from \"./User\"\r\nimport Page from \"./Page\"\r\nimport Upload from \"./Upload\"\r\nimport NewsEvent from \"./NewsEvent\"\r\nimport ExtraLink from \"./ExtraLink\"\r\nimport PageSection from \"./PageSection\"\r\nimport Filter from \"./Filter\"\r\n\r\nexport { User, Page, Upload, NewsEvent, ExtraLink, PageSection, Filter }\r\n","import nodemailer from \"nodemailer\";\r\nimport { IField } from \"../interfaces\";\r\nimport { postEmailValid } from \"../validation/email\";\r\nimport { config } from \"dotenv\";\r\nconfig({ path: \"../../../.env\" });\r\nimport { types } from \"../../modules/messageTypes\";\r\n\r\nexport const Mutation = {\r\n  async sendEmail(_: any, { firstname, lastname, email, message }: IField) {\r\n    try {\r\n      const {\r\n        firstname: vFirstname,\r\n        lastname: vLastname,\r\n        email: vEmail,\r\n        message: vMessage,\r\n        isError,\r\n      }: any = await postEmailValid({ firstname, lastname, email, message });\r\n      if (isError) {\r\n        throw new Error(\r\n          JSON.stringify({\r\n            firstname: vFirstname,\r\n            lastname: vLastname,\r\n            email: vEmail,\r\n            message: vMessage,\r\n          })\r\n        );\r\n      }\r\n\r\n      const output = `\r\n        <h2>У вас нове повідомлення!</h2>\r\n        <h4>Подробиці повідомлення:</h4>\r\n        <ul>\r\n          <li>Повне ім'я: ${firstname} ${lastname}</li>\r\n          <li>Електронна пошта: ${email}</li>\r\n        </ul>\r\n        <h4>Повідомлення:</h4>\r\n        <p>${message}</p>`;\r\n\r\n      let transporter = nodemailer.createTransport({\r\n        service: \"gmail\",\r\n        auth: {\r\n          user: process.env.EMAIL_FROM,\r\n          pass: process.env.EMAIL_FROM_PASS,\r\n        },\r\n        tls: {\r\n          rejectUnauthorized: false,\r\n        },\r\n      });\r\n\r\n      const response: any = await transporter.sendMail({\r\n        from: process.env.EMAIL_FROM,\r\n        to: process.env.EMAIL_TO,\r\n        subject: \"Нове повідомлення\",\r\n        text: \"Нове повідомлення\",\r\n        html: output,\r\n      });\r\n\r\n      if (response.error) {\r\n        return {\r\n          message: \"Помилка надсилання повідомлення!\",\r\n          type: types.error.keyWord,\r\n        };\r\n      }\r\n      return {\r\n        message: \"Повідомлення було успішно надіслано\",\r\n        type: types.success.keyWord,\r\n      };\r\n    } catch (error: any) {\r\n      throw new Error(error.message);\r\n    }\r\n  },\r\n};\r\n","import { Filter } from \"../models\";\r\nimport { IField } from \"../interfaces\";\r\n\r\nexport const Query = {\r\n  async getFilters(_: any, { url, lang }: IField) {\r\n    try {\r\n      const filters = await Filter.find({ url, lang });\r\n      return filters;\r\n    } catch (error: any) {\r\n      throw new Error(`Getting filters error: ${error.message}`);\r\n    }\r\n  },\r\n};\r\n","import { User, ExtraLink, Upload } from \"../models\";\r\nimport { IField } from \"../interfaces\";\r\n\r\nexport const NewsEvent = {\r\n  async owner({ owner }: IField) {\r\n    try {\r\n      const user = await User.findById(owner);\r\n      return user;\r\n    } catch (error: any) {\r\n      throw new Error(`Getting user to news or event error: ${error.message}`);\r\n    }\r\n  },\r\n  async links({ _id, lang }: IField) {\r\n    try {\r\n      const links = await ExtraLink.find({ content: _id, lang });\r\n      return links;\r\n    } catch (error: any) {\r\n      throw new Error(\r\n        `Getting extra links to news or event error: ${error.message}`\r\n      );\r\n    }\r\n  },\r\n  async preview({ _id }: IField) {\r\n    try {\r\n      const image: any = await Upload.findOne({ content: _id });\r\n      return image;\r\n    } catch (error: any) {\r\n      throw new Error(\r\n        `Getting preview image to news or event error: ${error.message}`\r\n      );\r\n    }\r\n  },\r\n};\r\n","import { NewsEvent, ExtraLink, Upload } from \"../models\";\r\nimport { IField, IIsAuth } from \"../interfaces\";\r\nimport { createEditValid } from \"../validation/newsEvents\";\r\nimport { types as msgTypes } from \"../../modules/messageTypes\";\r\nimport { deleteFile } from \"../helpers/upload\";\r\nimport { config } from \"dotenv\";\r\nconfig();\r\nconst { UPLOADS = \"\" } = process.env;\r\n\r\nexport const Query = {\r\n  async getNewsEvents(\r\n    _: any,\r\n    {\r\n      search,\r\n      type,\r\n      category,\r\n      dateFrom,\r\n      dateTo,\r\n      from,\r\n      to,\r\n      exceptId,\r\n      lang,\r\n    }: IField\r\n  ) {\r\n    try {\r\n      const searchQuery = search && { $text: { $search: search } };\r\n      const rangeDates =\r\n        dateFrom && dateTo\r\n          ? { $gte: dateFrom, $lte: dateTo }\r\n          : dateFrom\r\n          ? { $gte: dateFrom }\r\n          : dateTo\r\n          ? { $lte: dateTo }\r\n          : { $exists: true };\r\n      const query = {\r\n        ...searchQuery,\r\n        _id: exceptId ? { $ne: exceptId } : { $exists: true },\r\n        type,\r\n        lang,\r\n        date: type === \"news\" ? rangeDates : { $exists: true },\r\n        dateEvent: type === \"event\" ? rangeDates : { $exists: true },\r\n        category: category ? category : { $exists: true },\r\n      };\r\n\r\n      const newsEvents = await NewsEvent.find(query)\r\n        .skip(from)\r\n        .limit(to)\r\n        .sort({ dateEvent: -1 });\r\n\r\n      const quantity = await NewsEvent.find(query).countDocuments();\r\n\r\n      return { items: newsEvents, quantity };\r\n    } catch (error: any) {\r\n      throw new Error(`Getting news or events error: ${error.message}`);\r\n    }\r\n  },\r\n  async getNewsEvent(_: any, { contentId, type, lang }: IField) {\r\n    try {\r\n      //TODO: validation for each field and check in models\r\n\r\n      const newsEvent = await NewsEvent.findOne({ _id: contentId, type, lang });\r\n      return newsEvent;\r\n    } catch (error: any) {\r\n      throw new Error(`Getting news or event error: ${error.message}`);\r\n    }\r\n  },\r\n};\r\n\r\nexport const Mutation = {\r\n  async createNewsEvent(\r\n    _: any,\r\n    { title, content, type, category, dateEvent, links, lang }: IField,\r\n    { isAuth }: { isAuth: IIsAuth }\r\n  ) {\r\n    try {\r\n      if (!isAuth.auth) {\r\n        throw new Error(\"Access denied!\");\r\n      }\r\n\r\n      const {\r\n        title: vTitle,\r\n        content: vContent,\r\n        dateEvent: vDateEvent,\r\n        isError,\r\n      }: any = await createEditValid({ title, content, dateEvent });\r\n      if (isError) {\r\n        throw new Error(\r\n          JSON.stringify({\r\n            title: vTitle,\r\n            content: vContent,\r\n            dateEvent: vDateEvent,\r\n          })\r\n        );\r\n      }\r\n\r\n      const newsEvent = new NewsEvent({\r\n        title,\r\n        content,\r\n        type,\r\n        category,\r\n        dateEvent,\r\n        date: new Date().toISOString().split(\"T\")[0],\r\n        owner: isAuth.userId,\r\n        lang,\r\n      });\r\n      const newNewsEvent = await newsEvent.save();\r\n\r\n      for (let i = 0; i < links.length; i++) {\r\n        const extraLink = new ExtraLink({\r\n          link: links[i].link,\r\n          label: links[i].label,\r\n          content: newNewsEvent._id,\r\n          date: new Date(),\r\n          lang,\r\n        });\r\n        await extraLink.save();\r\n      }\r\n\r\n      return newNewsEvent._id;\r\n    } catch (error: any) {\r\n      throw new Error(error.message);\r\n    }\r\n  },\r\n  async editNewsEvent(\r\n    _: any,\r\n    {\r\n      contentId,\r\n      title,\r\n      content,\r\n      type,\r\n      category,\r\n      dateEvent,\r\n      links,\r\n      lang,\r\n    }: IField,\r\n    { isAuth }: { isAuth: IIsAuth }\r\n  ) {\r\n    try {\r\n      if (!isAuth.auth) {\r\n        throw new Error(\"Access denied!\");\r\n      }\r\n\r\n      const {\r\n        title: vTitle,\r\n        content: vContent,\r\n        dateEvent: vDateEvent,\r\n        isError,\r\n      }: any = await createEditValid({ title, content, dateEvent });\r\n      if (isError) {\r\n        throw new Error(\r\n          JSON.stringify({\r\n            title: vTitle,\r\n            content: vContent,\r\n            dateEvent: vDateEvent,\r\n          })\r\n        );\r\n      }\r\n\r\n      await NewsEvent.updateOne(\r\n        { _id: contentId, type },\r\n        {\r\n          title,\r\n          content,\r\n          category,\r\n          dateEvent,\r\n          date: new Date().toISOString().split(\"T\")[0],\r\n          lang,\r\n        }\r\n      );\r\n\r\n      await ExtraLink.deleteMany({ content: contentId });\r\n\r\n      for (let i = 0; i < links.length; i++) {\r\n        const extraLink = new ExtraLink({\r\n          link: links[i].link,\r\n          label: links[i].label,\r\n          content: contentId,\r\n          date: new Date(),\r\n          lang,\r\n        });\r\n        await extraLink.save();\r\n      }\r\n\r\n      return {\r\n        message: `${\r\n          type === \"news\" ? \"Новина\" : \"Подія\"\r\n        } була успішно оновлена!`,\r\n        type: msgTypes.success.keyWord,\r\n      };\r\n    } catch (error: any) {\r\n      throw new Error(error.message);\r\n    }\r\n  },\r\n  async deleteNewsEvent(\r\n    _: any,\r\n    { contentId }: IField,\r\n    { isAuth }: { isAuth: IIsAuth }\r\n  ) {\r\n    try {\r\n      if (!isAuth.auth) {\r\n        throw new Error(\"Access denied!\");\r\n      }\r\n\r\n      const images: any = await Upload.find({ content: contentId });\r\n      if (images.length) {\r\n        for (let i = 0; i < images.length; i++) {\r\n          await deleteFile(images[i].location, UPLOADS);\r\n        }\r\n        await Upload.deleteMany({ content: contentId });\r\n      }\r\n\r\n      await ExtraLink.deleteMany({ content: contentId });\r\n      const content: any = await NewsEvent.findById(contentId);\r\n      await NewsEvent.findByIdAndDelete(contentId);\r\n\r\n      return {\r\n        message: `${\r\n          content?.type === \"news\" ? \"Новина\" : \"Подія\"\r\n        } була успішно видалена!`,\r\n        type: msgTypes.success.keyWord,\r\n      };\r\n    } catch (error: any) {\r\n      throw new Error(`Deleting news or event error: ${error.message}`);\r\n    }\r\n  },\r\n};\r\n","import { Page } from \"../models\";\r\nimport { IIsAuth, IField } from \"../interfaces\";\r\nimport { uploadFile, deleteFile, updateFile } from \"../helpers/upload\";\r\nimport { types } from \"../../modules/messageTypes\";\r\nimport { config } from \"dotenv\";\r\nconfig();\r\nconst { UPLOAD = \"\" } = process.env;\r\n\r\nexport const Query = {\r\n  async getPage(_: any, { url }: { url: string }) {\r\n    try {\r\n      const page = await Page.findOne({ url });\r\n      return page;\r\n    } catch (error: any) {\r\n      throw new Error(`Getting page error: ${error.message}`);\r\n    }\r\n  },\r\n};\r\n\r\nexport const Mutation = {\r\n  async setPageImage(\r\n    _: any,\r\n    { url, image: uploadImage, deleting }: IField,\r\n    { isAuth }: { isAuth: IIsAuth }\r\n  ) {\r\n    try {\r\n      if (!isAuth.auth) {\r\n        throw new Error(\"Access denied!\");\r\n      }\r\n\r\n      const page: any = await Page.findOne({ url });\r\n      if (!page) {\r\n        let Location;\r\n        if (!!uploadImage) {\r\n          Location = await uploadFile(uploadImage, UPLOAD);\r\n        }\r\n        const newPage = new Page({\r\n          url,\r\n          image: Location,\r\n          date: new Date(),\r\n        });\r\n        await newPage.save();\r\n      } else {\r\n        let image = \"\";\r\n        if (deleting) {\r\n          if (page.image) {\r\n            await deleteFile(page.image, UPLOAD);\r\n          }\r\n        } else {\r\n          if (!!uploadImage) {\r\n            if (!!page.image) {\r\n              const Location = await updateFile(\r\n                page.image,\r\n                uploadImage,\r\n                UPLOAD\r\n              );\r\n              image = Location;\r\n            } else {\r\n              const Location = await uploadFile(uploadImage, UPLOAD);\r\n              image = Location;\r\n            }\r\n          }\r\n        }\r\n        await Page.updateOne({ url }, { image, date: new Date() });\r\n      }\r\n\r\n      return {\r\n        type: types.success.keyWord,\r\n        message: \"Зображення оновлено успішно!\",\r\n      };\r\n    } catch (error: any) {\r\n      throw new Error(`Updating image page error: ${error.message}`);\r\n    }\r\n  },\r\n};\r\n","import { User, Upload } from \"../models\";\r\nimport { IField } from \"../interfaces\";\r\n\r\nexport const PageSection = {\r\n  async owner({ owner }: IField) {\r\n    try {\r\n      const user = await User.findById(owner);\r\n      return user;\r\n    } catch (error: any) {\r\n      throw new Error(`Getting user to page section error: ${error.message}`);\r\n    }\r\n  },\r\n\r\n  async uploads({ _id }: IField) {\r\n    try {\r\n      const uploads = await Upload.find({ content: _id });\r\n      return uploads;\r\n    } catch (error: any) {\r\n      throw new Error(\r\n        `Getting uploads to page section error: ${error.message}`\r\n      );\r\n    }\r\n  },\r\n};\r\n","import { PageSection, Page, Filter, Upload, NewsEvent } from \"../models\";\nimport { IField, IIsAuth, IPageSection } from \"../interfaces\";\nimport { types } from \"../../modules/messageTypes\";\nimport { createEditValid } from \"../validation/pageSections\";\nimport { deleteFile } from \"../helpers/upload\";\nimport { config } from \"dotenv\";\nconfig();\nconst { UPLOADS = \"\" } = process.env;\n\nexport const Query = {\n  async getAllPageSections(_: any, { urls, lang }: IField) {\n    try {\n      const pageSections = await PageSection.find({\n        url: { $in: urls },\n        lang,\n      }).sort({\n        priority: -1,\n      });\n\n      return pageSections;\n    } catch (error: any) {\n      throw new Error(`Getting all page sections error: ${error.message}`);\n    }\n  },\n  async getPageSections(\n    _: any,\n    { search, url, filters, from, to, exceptId, lang }: IField\n  ) {\n    try {\n      const searchQuery = search && { $text: { $search: search } };\n      let collection: any = [];\n      let quantity = 0;\n      if (filters.length) {\n        for (let i = 0; i < filters.length; i++) {\n          const sections: any = await PageSection.find({\n            url,\n            lang,\n            ...searchQuery,\n          }).populate({\n            path: \"filters\",\n            match: { keyWord: filters[i].keyWord, value: filters[i].value },\n          });\n\n          let colectionTemp: IPageSection[] = [];\n          sections.forEach((item: any) => {\n            if (item.filters.length) {\n              colectionTemp.push(item);\n            }\n          });\n          if (i === 0) {\n            collection = colectionTemp;\n          } else {\n            let collectionNew = [];\n            for (let i = 0; i < collection.length; i++) {\n              for (let j = 0; j < colectionTemp.length; j++) {\n                if (\n                  String(collection[i]._id) === String(colectionTemp[j]._id)\n                ) {\n                  collectionNew.push(collection[i]);\n                }\n              }\n            }\n            collection = collectionNew;\n          }\n        }\n        let collectionNew: IPageSection[] = [];\n        collection.forEach((item: IPageSection, index: number) => {\n          if (from <= index && index < from + to) {\n            collectionNew.push(item);\n          }\n        });\n        quantity = collection.length;\n        const sections = await PageSection.find({\n          _id: { $in: collectionNew.map((item) => item._id) },\n          lang,\n        }).populate({ path: \"filters\" });\n        collection = sections;\n      } else {\n        const sections: any = await PageSection.find({\n          _id: exceptId ? { $ne: exceptId } : { $exists: true },\n          ...searchQuery,\n          url,\n          lang,\n        })\n          .populate({ path: \"filters\" })\n          .sort({\n            priority: 1,\n          })\n          .skip(from)\n          .limit(to);\n        quantity = await PageSection.find({\n          ...searchQuery,\n          url,\n          lang,\n        }).countDocuments();\n        collection = sections;\n      }\n\n      return {\n        items: collection,\n        quantity,\n      };\n    } catch (error: any) {\n      throw new Error(`Getting page sections error: ${error.message}`);\n    }\n  },\n  async searchContent(_: any, { search, tags, lang }: IField) {\n    try {\n      const searchQuery = search && { $text: { $search: search } };\n      const keyWords = tags.split(\" \");\n\n      const collection: any = {\n        images: [],\n        news: [],\n        events: [],\n        other: [],\n      };\n      if (!!keyWords.includes(\"images\") || !tags.length) {\n        const uploads = await Upload.find({\n          ...searchQuery,\n          type: { $ne: \"private\" },\n          format: \"image\",\n        })\n          .sort({ date: -1 })\n          .limit(4);\n        collection.images = uploads;\n      }\n      if (!!keyWords.includes(\"news\") || !tags.length) {\n        const news = await NewsEvent.find({\n          ...searchQuery,\n          type: \"news\",\n          lang,\n        })\n          .sort({ date: -1 })\n          .limit(4);\n        collection.news = news;\n      }\n      if (!!keyWords.includes(\"events\") || !tags.length) {\n        const events = await NewsEvent.find({\n          ...searchQuery,\n          type: \"event\",\n          lang,\n        })\n          .sort({ date: -1 })\n          .limit(4);\n        collection.events = events;\n      }\n      if (!!keyWords.includes(\"other\") || !tags.length) {\n        let sections;\n        let pagesection = PageSection.find({ ...searchQuery, lang }).sort({\n          date: -1,\n        });\n\n        if (!tags.length && !search.length) {\n          sections = await pagesection.limit(10);\n        } else {\n          if (!search.length) {\n            sections = await pagesection.limit(10);\n          } else {\n            sections = await pagesection;\n          }\n        }\n\n        collection.other = sections;\n      }\n\n      return collection;\n    } catch (error: any) {\n      throw new Error(`Getting searched content error: ${error.message}`);\n    }\n  },\n  async getPageSection(_: any, { sectionId, lang }: IField) {\n    try {\n      const section = await PageSection.findOne({\n        _id: sectionId,\n        lang,\n      }).populate({\n        path: \"filters\",\n      });\n      return section;\n    } catch (error: any) {\n      throw new Error(`Getting page section error: ${error.message}`);\n    }\n  },\n};\n\nexport const Mutation = {\n  async createPageSection(\n    _: any,\n    { title, content, priority, url, filters, optContent, lang }: IField,\n    { isAuth }: { isAuth: IIsAuth }\n  ) {\n    try {\n      if (!isAuth.auth) {\n        throw new Error(\"Access denied!\");\n      }\n\n      const {\n        title: vTitle,\n        content: vContent,\n        priority: vPriority,\n        url: vUrl,\n        isError,\n      }: any = await createEditValid({\n        title,\n        content: optContent ? undefined : content,\n        priority,\n        url,\n      });\n      let errors: any = {};\n      if (filters.length) {\n        for (let i = 0; i < filters.length; i++) {\n          if (!filters[i].value) {\n            errors[filters[i].keyWord] = {\n              value: filters[i].value,\n              msg: [\"Це поле не може бути порожнім!\"],\n            };\n          }\n        }\n      }\n      if (isError || Object.keys(errors).length) {\n        throw new Error(\n          JSON.stringify({\n            title: vTitle,\n            content: optContent ? { value: \"\", msg: [] } : vContent,\n            priority: vPriority,\n            url: vUrl,\n            ...errors,\n          })\n        );\n      }\n\n      const page: any = await Page.findOne({ url });\n      let savedPage: any;\n      if (!page) {\n        const newPage = new Page({\n          url,\n          date: new Date(),\n        });\n        savedPage = await newPage.save();\n      }\n      let pageCollection = page || savedPage;\n\n      const newSection = new PageSection({\n        page: pageCollection._id,\n        title,\n        url,\n        content,\n        priority,\n        owner: isAuth.userId,\n        date: new Date(),\n        lang,\n      });\n      const section: any = await newSection.save();\n\n      if (filters.length) {\n        for (let i = 0; i < filters.length; i++) {\n          const filter = new Filter({\n            page: pageCollection._id,\n            url,\n            section: section._id,\n            keyWord: filters[i].keyWord,\n            value: filters[i].value,\n            date: new Date(),\n            lang,\n          });\n          const newFilter = await filter.save();\n          section.filters.push(newFilter._id);\n        }\n        await section.save();\n      }\n\n      return {\n        message: \"Розділ створено успішно!\",\n        type: types.success.keyWord,\n      };\n    } catch (error: any) {\n      throw new Error(error.message);\n    }\n  },\n  async editPageSection(\n    _: any,\n    { sectionId, title, content, priority, filters, optContent, lang }: IField,\n    { isAuth }: { isAuth: IIsAuth }\n  ) {\n    try {\n      if (!isAuth.auth) {\n        throw new Error(\"Access denied!\");\n      }\n\n      const {\n        title: vTitle,\n        content: vContent,\n        priority: vPriority,\n        isError,\n      }: any = await createEditValid({\n        title,\n        content: optContent ? undefined : content,\n        priority,\n      });\n      let errors: any = {};\n      if (filters.length) {\n        for (let i = 0; i < filters.length; i++) {\n          if (!filters[i].value) {\n            errors[filters[i].keyWord] = {\n              value: filters[i].value,\n              msg: [\"Це поле не може бути порожнім!\"],\n            };\n          }\n        }\n      }\n      if (isError || Object.keys(errors).length) {\n        throw new Error(\n          JSON.stringify({\n            title: vTitle,\n            content: optContent ? { value: \"\", msg: [] } : vContent,\n            priority: vPriority,\n            ...errors,\n          })\n        );\n      }\n\n      await PageSection.findByIdAndUpdate(sectionId, {\n        title,\n        content,\n        priority,\n        date: new Date(),\n        lang,\n      });\n      if (filters.length) {\n        for (let i = 0; i < filters.length; i++) {\n          await Filter.findByIdAndUpdate(filters[i].filterId, {\n            value: filters[i].value,\n            lang,\n          });\n        }\n      }\n\n      return {\n        message: \"Розділ оновлено успішно!\",\n        type: types.success.keyWord,\n      };\n    } catch (error: any) {\n      throw new Error(error.message);\n    }\n  },\n  async deletePageSection(\n    _: any,\n    { sectionId }: IField,\n    { isAuth }: { isAuth: IIsAuth }\n  ) {\n    try {\n      if (!isAuth.auth) {\n        throw new Error(\"Access denied!\");\n      }\n\n      const uploads: any = await Upload.find({ content: sectionId });\n      if (uploads.length) {\n        for (let i = 0; i < uploads.length; i++) {\n          await deleteFile(uploads[i].location, UPLOADS);\n        }\n        await Upload.deleteMany({ content: sectionId });\n      }\n\n      await Filter.deleteMany({ section: sectionId });\n      await PageSection.findByIdAndDelete(sectionId);\n\n      return {\n        message: \"Розділ видалено успішно!\",\n        type: types.success.keyWord,\n      };\n    } catch (error: any) {\n      throw new Error(`Deleting page section error: ${error.message}`);\n    }\n  },\n};\n","import { User } from \"../models\"\r\nimport { IField } from \"../interfaces\"\r\n\r\nexport const UploadFile = {\r\n  async owner({ owner }: IField) {\r\n    try {\r\n      const user = await User.findById(owner)\r\n      return user\r\n    } catch (error) {\r\n      throw new Error(`Getting owner to upload error: ${error.message}`)\r\n    }\r\n  },\r\n}\r\n","import { Upload } from \"../models\"\r\nimport { uploadFile, deleteFile, updateFile } from \"../helpers/upload\"\r\nimport { IField, IIsAuth } from \"../interfaces\"\r\nimport { types as msgTypes } from \"../../modules/messageTypes\"\r\nimport { config } from \"dotenv\"\r\nconfig()\r\nconst { UPLOADS = \"\" } = process.env\r\n\r\nexport const Query = {\r\n  async getImages(_: any, { from, to, search, type }: IField) {\r\n    try {\r\n      let typeQuery = type ? type : { $ne: \"private\" }\r\n      let query\r\n      if (search) {\r\n        query = {\r\n          $text: { $search: search },\r\n          type: typeQuery,\r\n          format: \"image\",\r\n        }\r\n      } else {\r\n        query = { type: typeQuery, format: \"image\" }\r\n      }\r\n\r\n      const images = await Upload.find({ ...query })\r\n        .sort({ date: -1 })\r\n        .skip(from)\r\n        .limit(to)\r\n      const quantity = await Upload.find({ ...query }).countDocuments()\r\n\r\n      return { images, quantity }\r\n    } catch (error) {\r\n      throw new Error(`Getting images errror: ${error.message}`)\r\n    }\r\n  },\r\n  async getImage(_: any, { imageId }: IField) {\r\n    try {\r\n      const image = await Upload.findById(imageId)\r\n      return image\r\n    } catch (error) {\r\n      throw new Error(`Getting image errror: ${error.message}`)\r\n    }\r\n  },\r\n  async getContentImages(_: any, { contentId }: IField) {\r\n    try {\r\n      //TODO: validation for each field and check in models\r\n\r\n      const images = await Upload.find({ content: contentId })\r\n\r\n      return images\r\n    } catch (error) {\r\n      throw new Error(`Getting content images error: ${error.message}`)\r\n    }\r\n  },\r\n}\r\n\r\nexport const Mutation = {\r\n  async createUpload(\r\n    _: any,\r\n    {\r\n      hashtags,\r\n      description,\r\n      upload: uploadImage,\r\n      content,\r\n      type,\r\n      mimetype = \"image\",\r\n    }: IField,\r\n    { isAuth }: { isAuth: IIsAuth }\r\n  ) {\r\n    try {\r\n      if (!isAuth.auth) {\r\n        throw new Error(\"Access denied!\")\r\n      }\r\n      //TODO: validation for each field and check in models\r\n      const isImgFormat = mimetype === \"image\"\r\n      if (!!uploadImage) {\r\n        const imageValid = await uploadImage\r\n        const fileType = imageValid.mimetype.split(\"/\")[0]\r\n        if (fileType !== \"image\" && isImgFormat) {\r\n          throw new Error(\r\n            JSON.stringify({\r\n              upload: {\r\n                value: \"\",\r\n                msg: [\"Ви не можете вибрати файл, який не є зображенням!\"],\r\n              },\r\n            })\r\n          )\r\n        }\r\n        if (type) {\r\n          const Location = await uploadFile(uploadImage, UPLOADS)\r\n\r\n          const upload = new Upload({\r\n            owner: isAuth.userId,\r\n            date: new Date(),\r\n            location: Location,\r\n            content,\r\n            type,\r\n            description,\r\n            hashtags,\r\n            format: isImgFormat ? \"image\" : \"file\",\r\n          })\r\n          await upload.save()\r\n\r\n          return {\r\n            message: `${isImgFormat ? \"Зображення\" : \"Файл\"} успішно додано!`,\r\n            type: msgTypes.success.keyWord,\r\n          }\r\n        } else {\r\n          throw new Error(\"Type not specified while creating upload!\")\r\n        }\r\n      } else {\r\n        throw new Error(\r\n          JSON.stringify({\r\n            upload: {\r\n              value: \"\",\r\n              msg: [\r\n                `Будь-ласка виберіть ${isImgFormat ? \"зображення\" : \"файл\"}!`,\r\n              ],\r\n            },\r\n          })\r\n        )\r\n      }\r\n    } catch (error) {\r\n      throw new Error(error.message)\r\n    }\r\n  },\r\n  async editUpload(\r\n    _: any,\r\n    { imageId, hashtags, description, upload: uploadImage }: IField,\r\n    { isAuth }: { isAuth: IIsAuth }\r\n  ) {\r\n    try {\r\n      if (!isAuth.auth) {\r\n        throw new Error(\"Access denied!\")\r\n      }\r\n      //TODO: validation for each field and check in models\r\n\r\n      const upload: any = await Upload.findById(imageId)\r\n      let Location = upload.location\r\n\r\n      if (!!uploadImage) {\r\n        const imageValid = await uploadImage\r\n        const fileType = imageValid.mimetype.split(\"/\")[0]\r\n        if (fileType !== \"image\" && upload.format === \"image\") {\r\n          throw new Error(\r\n            JSON.stringify({\r\n              upload: {\r\n                value: \"\",\r\n                msg: [\"Ви не можете вибрати файл, який не є зображенням!\"],\r\n              },\r\n            })\r\n          )\r\n        }\r\n        const fileLocation = await updateFile(\r\n          upload.location,\r\n          uploadImage,\r\n          UPLOADS\r\n        )\r\n        Location = fileLocation\r\n      }\r\n\r\n      await Upload.findByIdAndUpdate(imageId, {\r\n        location: Location,\r\n        hashtags,\r\n        description,\r\n        date: new Date(),\r\n      })\r\n      return {\r\n        message: `${\r\n          upload.format === \"image\" ? \"Зображення\" : \"Файл\"\r\n        } успішно оновлено!`,\r\n        type: msgTypes.success.keyWord,\r\n      }\r\n    } catch (error) {\r\n      throw new Error(`Updating upload error: ${error.message}`)\r\n    }\r\n  },\r\n  async deleteUpload(\r\n    _: any,\r\n    { imageId }: IField,\r\n    { isAuth }: { isAuth: IIsAuth }\r\n  ) {\r\n    try {\r\n      if (!isAuth.auth) {\r\n        throw new Error(\"Access denied!\")\r\n      }\r\n      //TODO: validation for each field and check in models\r\n\r\n      const upload: any = await Upload.findById(imageId)\r\n      await deleteFile(upload.location, UPLOADS)\r\n      await Upload.findByIdAndDelete(imageId)\r\n\r\n      return {\r\n        message: \"Файл успішно видалено!\",\r\n        type: msgTypes.success.keyWord,\r\n      }\r\n    } catch (error) {\r\n      throw new Error(`Deleting upload error: ${error.message}`)\r\n    }\r\n  },\r\n}\r\n","import { User } from \"../models\"\r\nimport jwt from \"jsonwebtoken\"\r\nimport bcrypt from \"bcryptjs\"\r\nimport { config } from \"dotenv\"\r\nimport { AuthenticationError } from \"apollo-server\"\r\nimport { registerValid, loginValid } from \"../validation/auth\"\r\nimport { IField, IIsAuth } from \"../interfaces\"\r\nimport { getColor } from \"../helpers/randomColor\"\r\nimport { uploadFile, deleteFile, updateFile } from \"../helpers/upload\"\r\nimport { types } from \"../../modules/messageTypes\"\r\nconfig({ path: \"../../../.env\" })\r\nconst { UPLOAD = \"\", JWT_SECRET = \"\" } = process.env\r\n\r\nexport const Query = {\r\n  async register(_: any, args: IField) {\r\n    try {\r\n      const validatedFields = await registerValid({\r\n        firstname: args.firstname,\r\n        lastname: args.lastname,\r\n        email: args.email,\r\n        password: args.password,\r\n      })\r\n      if (validatedFields.isError) {\r\n        throw new Error(JSON.stringify(validatedFields))\r\n      }\r\n\r\n      const { email } = validatedFields\r\n\r\n      const salt = bcrypt.genSaltSync(12)\r\n      const hash = bcrypt.hashSync(args.password, salt)\r\n\r\n      const user = new User({\r\n        email: email.value,\r\n        firstname: args.firstname,\r\n        lastname: args.lastname,\r\n        middlename: args.middlename,\r\n        password: hash,\r\n        role: args.role,\r\n        color: getColor(),\r\n        confirmed: !args.isAdmin && true,\r\n        encrpassword: args.password,\r\n        date: new Date(),\r\n      })\r\n      const newUser = await user.save()\r\n\r\n      if (args.isAdmin) {\r\n        return { userId: newUser.id }\r\n      }\r\n      const token = jwt.sign({ userId: newUser._id }, JWT_SECRET)\r\n      return { userId: newUser.id, token }\r\n    } catch (error) {\r\n      throw new AuthenticationError(error.message)\r\n    }\r\n  },\r\n  async login(_: any, args: IField) {\r\n    try {\r\n      const validatedFields = await loginValid(args)\r\n      if (validatedFields.isError) {\r\n        throw new Error(JSON.stringify(validatedFields))\r\n      }\r\n\r\n      const { instance: user } = validatedFields\r\n      const token = jwt.sign({ userId: user?._id }, JWT_SECRET)\r\n\r\n      return { userId: user?._id, token }\r\n    } catch (error) {\r\n      throw new AuthenticationError(error.message)\r\n    }\r\n  },\r\n  async getUser(_: any, { userId }: IField) {\r\n    try {\r\n      const user = await User.findById(userId)\r\n      return user\r\n    } catch (error) {\r\n      throw new Error(`Getting user data error: ${error.message}`)\r\n    }\r\n  },\r\n  async getAllUsers(_: any, __: any, { isAuth }: { isAuth: IIsAuth }) {\r\n    try {\r\n      if (!isAuth.auth) {\r\n        throw new Error(\"Access denied!\")\r\n      }\r\n\r\n      const users = await User.find()\r\n      return users\r\n    } catch (error) {\r\n      throw new Error(`Getting all users error: ${error.message}`)\r\n    }\r\n  },\r\n}\r\n\r\nexport const Mutation = {\r\n  async setUserAva(\r\n    _: any,\r\n    { image: uploadImage, deleting }: IField,\r\n    { isAuth }: { isAuth: IIsAuth }\r\n  ) {\r\n    try {\r\n      if (!isAuth.auth) {\r\n        throw new Error(\"Access denied!\")\r\n      }\r\n\r\n      const user: any = await User.findById(isAuth.userId)\r\n\r\n      if (user) {\r\n        let ava = \"\"\r\n        if (deleting) {\r\n          if (user.ava) {\r\n            await deleteFile(user.ava, UPLOAD)\r\n          }\r\n        } else {\r\n          if (!!uploadImage) {\r\n            if (user.ava) {\r\n              const Location = await updateFile(user.ava, uploadImage, UPLOAD)\r\n              ava = Location\r\n            } else {\r\n              const Location = await uploadFile(uploadImage, UPLOAD)\r\n              ava = Location\r\n            }\r\n          }\r\n        }\r\n        await User.findByIdAndUpdate(isAuth.userId, { ava })\r\n      }\r\n\r\n      return {\r\n        type: types.success.keyWord,\r\n        message: \"Зображення оновлено успішно!\",\r\n      }\r\n    } catch (error) {\r\n      throw new Error(`Updating user avatar error: ${error.message}`)\r\n    }\r\n  },\r\n  async updateUserData(\r\n    _: any,\r\n    {\r\n      firstname,\r\n      lastname,\r\n      middlename,\r\n      address,\r\n      phone,\r\n      email,\r\n      password,\r\n    }: IField,\r\n    { isAuth }: { isAuth: IIsAuth }\r\n  ) {\r\n    try {\r\n      if (!isAuth.auth) {\r\n        throw new Error(\"Access denied!\")\r\n      }\r\n\r\n      const user: any = await User.findById(isAuth.userId)\r\n\r\n      let newPassword = password || user.encrpassword\r\n      let newEncrpassword = newPassword\r\n\r\n      const validatedFields = await registerValid({\r\n        firstname,\r\n        lastname,\r\n        email,\r\n        password: newPassword,\r\n        exceptId: isAuth.userId || \"\",\r\n      })\r\n      if (validatedFields.isError) {\r\n        throw new Error(JSON.stringify(validatedFields))\r\n      }\r\n\r\n      const salt = bcrypt.genSaltSync(12)\r\n      newPassword = bcrypt.hashSync(newPassword, salt)\r\n\r\n      await User.findByIdAndUpdate(isAuth.userId, {\r\n        firstname,\r\n        lastname,\r\n        middlename,\r\n        address,\r\n        phone,\r\n        email,\r\n        password: newPassword,\r\n        encrpassword: newEncrpassword,\r\n      })\r\n\r\n      return {\r\n        type: types.success.keyWord,\r\n        message: \"Дані користувача оновлено успішно!\",\r\n      }\r\n    } catch (error) {\r\n      throw new Error(error.message)\r\n    }\r\n  },\r\n}\r\n","import { gql } from \"apollo-server\";\r\n\r\nexport default gql`\r\n  type Filter {\r\n    id: ID!\r\n    page: ID!\r\n    url: String!\r\n    section: ID!\r\n    keyWord: String!\r\n    value: String!\r\n    date: String!\r\n  }\r\n  input InputFilter {\r\n    keyWord: String!\r\n    value: String!\r\n  }\r\n  input InputFilterEdit {\r\n    filterId: ID!\r\n    keyWord: String!\r\n    value: String!\r\n  }\r\n  type PageSection {\r\n    id: ID!\r\n    page: ID!\r\n    url: String!\r\n    title: String!\r\n    content: String\r\n    priority: Int!\r\n    filters: [Filter]!\r\n    owner: User!\r\n    date: String!\r\n    uploads: [UploadFile]!\r\n  }\r\n  type ExtraLink {\r\n    id: ID!\r\n    link: String!\r\n    label: String!\r\n    content: ID!\r\n    date: String!\r\n  }\r\n  input InputLink {\r\n    link: String!\r\n    label: String!\r\n  }\r\n  type NewsEvent {\r\n    id: ID!\r\n    title: String!\r\n    content: String!\r\n    type: String!\r\n    owner: User!\r\n    date: String!\r\n    category: String!\r\n    dateEvent: String!\r\n    links: [ExtraLink]!\r\n    preview: UploadFile\r\n  }\r\n  type UploadFile {\r\n    id: ID!\r\n    owner: User!\r\n    date: String!\r\n    location: String!\r\n    content: ID\r\n    type: String!\r\n    key: String!\r\n    hashtags: String\r\n    description: String\r\n    format: String!\r\n  }\r\n  type Page {\r\n    id: ID!\r\n    url: String!\r\n    image: String\r\n    imageKey: String\r\n    date: String!\r\n  }\r\n  type Msg {\r\n    type: String!\r\n    message: String!\r\n  }\r\n  type User {\r\n    id: ID!\r\n    email: String!\r\n    ava: String\r\n    color: String!\r\n    firstname: String!\r\n    confirmed: Boolean!\r\n    lastname: String!\r\n    middlename: String\r\n    phone: String\r\n    address: String\r\n    birth: String\r\n    role: String!\r\n    date: String!\r\n  }\r\n  type Auth {\r\n    userId: String\r\n    token: String\r\n  }\r\n  type Images {\r\n    images: [UploadFile]!\r\n    quantity: Int!\r\n  }\r\n  type NewsEvents {\r\n    items: [NewsEvent]!\r\n    quantity: Int!\r\n  }\r\n  type PageSections {\r\n    items: [PageSection]!\r\n    quantity: Int!\r\n  }\r\n  type SearchContent {\r\n    images: [UploadFile]!\r\n    news: [NewsEvent]!\r\n    events: [NewsEvent]!\r\n    other: [PageSection]!\r\n  }\r\n\r\n  type Query {\r\n    searchContent(search: String, tags: String, lang: String): SearchContent!\r\n    getUser(userId: String!): User!\r\n    getAllUsers: [User]!\r\n    getFilters(url: String!, lang: String): [Filter]!\r\n    getAllPageSections(urls: [String]!, lang: String): [PageSection]!\r\n    getPageSections(\r\n      search: String\r\n      url: String!\r\n      filters: [InputFilter]!\r\n      from: Int!\r\n      to: Int\r\n      exceptId: ID\r\n      lang: String\r\n    ): PageSections!\r\n    getPageSection(sectionId: ID!, lang: String): PageSection!\r\n    getNewsEvents(\r\n      search: String\r\n      type: String!\r\n      category: String\r\n      dateFrom: String\r\n      dateTo: String\r\n      from: Int!\r\n      to: Int!\r\n      exceptId: ID\r\n      lang: String\r\n    ): NewsEvents!\r\n    getNewsEvent(contentId: ID!, type: String!, lang: String): NewsEvent!\r\n    getContentImages(contentId: ID!): [UploadFile]!\r\n    login(email: String!, password: String!): Auth\r\n    register(\r\n      firstname: String!\r\n      lastname: String!\r\n      email: String!\r\n      password: String!\r\n      isAdmin: Boolean\r\n      role: String\r\n    ): Auth\r\n    getImages(from: Int!, to: Int!, search: String, type: String): Images!\r\n    getImage(imageId: ID!): UploadFile!\r\n    getPage(url: String!): Page\r\n  }\r\n  type Mutation {\r\n    setUserAva(image: Upload, deleting: Boolean!): Msg!\r\n    updateUserData(\r\n      firstname: String!\r\n      lastname: String!\r\n      middlename: String\r\n      address: String\r\n      phone: String\r\n      email: String!\r\n      password: String\r\n    ): Msg!\r\n    sendEmail(\r\n      firstname: String!\r\n      lastname: String!\r\n      email: String!\r\n      message: String!\r\n    ): Msg!\r\n    createPageSection(\r\n      url: String!\r\n      title: String!\r\n      content: String!\r\n      priority: Int!\r\n      filters: [InputFilter]!\r\n      optContent: Boolean\r\n      lang: String\r\n    ): Msg!\r\n    editPageSection(\r\n      sectionId: ID!\r\n      title: String!\r\n      content: String!\r\n      priority: Int!\r\n      filters: [InputFilterEdit]!\r\n      optContent: Boolean\r\n      lang: String\r\n    ): Msg!\r\n    deletePageSection(sectionId: ID!): Msg!\r\n    createNewsEvent(\r\n      title: String!\r\n      content: String!\r\n      type: String!\r\n      category: String!\r\n      dateEvent: String!\r\n      links: [InputLink]\r\n      lang: String\r\n    ): String!\r\n    editNewsEvent(\r\n      contentId: ID!\r\n      title: String!\r\n      content: String!\r\n      type: String!\r\n      category: String!\r\n      dateEvent: String!\r\n      links: [InputLink]\r\n      lang: String\r\n    ): Msg!\r\n    deleteNewsEvent(contentId: ID!): Msg!\r\n    createUpload(\r\n      hashtags: String\r\n      description: String\r\n      upload: Upload\r\n      content: ID\r\n      type: String\r\n      mimetype: String\r\n    ): Msg!\r\n    editUpload(\r\n      imageId: ID!\r\n      hashtags: String\r\n      description: String\r\n      upload: Upload\r\n    ): Msg!\r\n    deleteUpload(imageId: ID!): Msg!\r\n    setPageImage(url: String!, image: Upload, deleting: Boolean!): Msg!\r\n  }\r\n`;\r\n","import { User } from \"../models\"\r\nimport {\r\n  IFieldsMod,\r\n  IField,\r\n  IValidRegisterResult,\r\n  IValidLoginResult,\r\n} from \"../interfaces\"\r\nimport {\r\n  isEmpty,\r\n  isEmail,\r\n  isUnique,\r\n  isContains,\r\n  isLength,\r\n  comparePassword,\r\n} from \"./snippets\"\r\n\r\nasync function register(fields: IField): Promise<IValidRegisterResult> {\r\n  try {\r\n    let fieldsMod: IFieldsMod = {}\r\n    let isError: boolean = false\r\n    Object.keys(fields).forEach((key: string) => {\r\n      if (key === \"exceptId\") {\r\n        return\r\n      }\r\n      let field = { value: fields[key], msg: [] }\r\n      fieldsMod[key] = isEmpty(field, \"Це поле не може бути порожнім!\")\r\n      if (fieldsMod[key].msg.length) {\r\n        isError = true\r\n      }\r\n    })\r\n\r\n    let { firstname, lastname, email, password } = fieldsMod\r\n    if (isError) {\r\n      return { firstname, lastname, email, password, isError }\r\n    }\r\n\r\n    email = isEmail(email, \"Електронна адреса неправильна!\")\r\n    password = isLength(password, {\r\n      min: 4,\r\n      max: 50,\r\n      minMsg: \"Пароль повинен містити щонайменше 4 символи!\",\r\n      maxMsg: \"Пароль повинен містити не більше 50 символів!\",\r\n    })\r\n    if (email.msg.length || password.msg.length) {\r\n      return { email, password, isError: true }\r\n    }\r\n\r\n    email = await isUnique(\r\n      fieldsMod.email,\r\n      \"Ця електронна адреса вже існує, виберіть іншу!\",\r\n      User,\r\n      \"email\",\r\n      fields.exceptId\r\n    )\r\n    if (email.msg.length) {\r\n      return { email, password, isError: true }\r\n    }\r\n\r\n    return { email, password, isError: false }\r\n  } catch (error) {\r\n    const errorMsg = `Помилка перевірки полів вводу при реєстрації: ${error.message}`\r\n\r\n    const setError = (value: string) => {\r\n      return { value, msg: [errorMsg] }\r\n    }\r\n    return {\r\n      email: setError(fields.email),\r\n      password: setError(fields.password),\r\n      isError: true,\r\n    }\r\n  }\r\n}\r\n\r\nasync function login(fields: IField): Promise<IValidLoginResult> {\r\n  try {\r\n    let fieldsMod: IFieldsMod = {}\r\n    let isError = false\r\n    Object.keys(fields).forEach((key) => {\r\n      fieldsMod[key] = isEmpty(\r\n        { value: fields[key], msg: [] },\r\n        \"Це поле не може бути порожнім!\"\r\n      )\r\n      if (fieldsMod[key].msg.length) {\r\n        isError = true\r\n      }\r\n    })\r\n    let { email, password } = fieldsMod\r\n    if (isError) {\r\n      return { email, password, isError }\r\n    }\r\n\r\n    email = isEmail(email, \"Електронна адреса неправильна!\")\r\n    password = isLength(password, {\r\n      min: 4,\r\n      max: 50,\r\n      minMsg: \"Пароль повинен містити щонайменше 4 символи!\",\r\n      maxMsg: \"Пароль повинен містити не більше 50 символів!\",\r\n    })\r\n    if (email.msg.length || password.msg.length) {\r\n      return { email, password, isError: true }\r\n    }\r\n\r\n    const { instance, field: emailVerified } = await isContains(\r\n      email,\r\n      \"Ця електронна адреса не існує, виберіть іншу!\",\r\n      User,\r\n      \"email\"\r\n    )\r\n    if (instance) {\r\n      let { passwordVerified, isSimilar } = await comparePassword(\r\n        password,\r\n        instance.password,\r\n        \"Пароль неправильний. Будь ласка, спробуйте ще раз!\"\r\n      )\r\n      const resultVerification = {\r\n        email: emailVerified,\r\n        password: passwordVerified,\r\n      }\r\n      if (!isSimilar) {\r\n        return { isError: true, ...resultVerification }\r\n      }\r\n      return { isError: false, ...resultVerification, instance }\r\n    } else {\r\n      return { email: emailVerified, password, isError: true }\r\n    }\r\n  } catch (error) {\r\n    const errorMsg = `Помилка перевірки полів вводу при авторизації: ${error.message}`\r\n\r\n    const setError = (value: string) => {\r\n      return { value, msg: [errorMsg] }\r\n    }\r\n    return {\r\n      email: setError(fields.email),\r\n      password: setError(fields.password),\r\n      isError: true,\r\n    }\r\n  }\r\n}\r\n\r\nexport const loginValid = login\r\nexport const registerValid = register\r\n","import { IFieldsMod, IField } from \"../interfaces\"\r\nimport { isEmpty, isEmail, isLength } from \"./snippets\"\r\n\r\nexport async function postEmailValid(fields: IField) {\r\n  try {\r\n    let fieldsMod: IFieldsMod = {}\r\n    let isError: boolean = false\r\n    Object.keys(fields).forEach((key: string) => {\r\n      let field = { value: fields[key], msg: [] }\r\n      fieldsMod[key] = isEmpty(field, \"Це поле не може бути порожнім!\")\r\n      if (fieldsMod[key].msg.length) {\r\n        isError = true\r\n      }\r\n    })\r\n\r\n    let { firstname, lastname, email, message } = fieldsMod\r\n    if (isError) {\r\n      return { firstname, lastname, email, message, isError }\r\n    }\r\n\r\n    email = isEmail(email, \"Електронна адреса неправильна!\")\r\n    message = isLength(message, {\r\n      min: 5,\r\n      max: 1500,\r\n      minMsg: \"Повідомлення має містити принаймні 5 символів!\",\r\n      maxMsg: \"Повідомлення має містити не більше 1500 символів!\",\r\n    })\r\n    if (email.msg.length || message.msg.length) {\r\n      return { firstname, lastname, email, message, isError: true }\r\n    }\r\n\r\n    return { firstname, lastname, email, message, isError: false }\r\n  } catch (error) {\r\n    const errorMsg = `Помилка перевірки полів вводу при надсиланні повідомлення: ${error.message}`\r\n\r\n    const setError = (value: string) => {\r\n      return { value, msg: [errorMsg] }\r\n    }\r\n    return {\r\n      firstname: setError(fields.firstname),\r\n      lastname: setError(fields.lastname),\r\n      email: setError(fields.email),\r\n      message: setError(fields.message),\r\n      isError: true,\r\n    }\r\n  }\r\n}\r\n","import { IField, IFieldsMod } from \"../interfaces\"\r\nimport { isEmpty, isLength } from \"./snippets\"\r\n\r\nexport const createEditValid = async (fields: IField) => {\r\n  try {\r\n    let fieldsMod: IFieldsMod = {}\r\n    let isError: boolean = false\r\n    Object.keys(fields).forEach((key: string) => {\r\n      let field = { value: fields[key], msg: [] }\r\n      fieldsMod[key] = isEmpty(field, \"Це поле не може бути порожнім!\")\r\n      if (fieldsMod[key].msg.length) {\r\n        isError = true\r\n      }\r\n    })\r\n\r\n    let { title, content, dateEvent } = fieldsMod\r\n    if (isError) {\r\n      return { title, content, dateEvent, isError }\r\n    }\r\n\r\n    title = isLength(title, {\r\n      min: 5,\r\n      max: 150,\r\n      minMsg: \"Заголовок повинен містити принаймні 5 символів!\",\r\n      maxMsg: \"Заголовок повинен містити не більше 150 символів!\",\r\n    })\r\n\r\n    if (title.msg.length) {\r\n      return { title, content, dateEvent, isError: true }\r\n    }\r\n\r\n    return { title, content, dateEvent, isError: false }\r\n  } catch (error) {\r\n    const errorMsg = `Помилка перевірки полів вводу при створенні або редагуванні новин або подій: ${error.message}`\r\n\r\n    const setError = (value: string) => {\r\n      return { value, msg: [errorMsg] }\r\n    }\r\n    return {\r\n      title: setError(fields.title),\r\n      content: setError(fields.title),\r\n      dateEvent: setError(fields.title),\r\n      isError: true,\r\n    }\r\n  }\r\n}\r\n","import { IField, IFieldsMod } from \"../interfaces\"\r\nimport { isEmpty, isLength } from \"./snippets\"\r\n\r\nexport const createEditValid = async (fields: IField) => {\r\n  try {\r\n    let fieldsMod: IFieldsMod = {}\r\n    let isError: boolean = false\r\n    Object.keys(fields).forEach((key: string) => {\r\n      let field = { value: String(fields[key]), msg: [] }\r\n      fieldsMod[key] = isEmpty(field, \"Це поле не може бути порожнім!\")\r\n      if (fieldsMod[key].msg.length) {\r\n        isError = true\r\n      }\r\n    })\r\n\r\n    let { title, content, priority, url } = fieldsMod\r\n    if (isError) {\r\n      return { title, content, priority, url, isError }\r\n    }\r\n\r\n    title = isLength(title, {\r\n      min: 3,\r\n      max: 100,\r\n      minMsg: \"Заголовок повинен містити принаймні 3 символів!\",\r\n      maxMsg: \"Заголовок повинен містити не більше 100 символів!\",\r\n    })\r\n\r\n    if (title.msg.length) {\r\n      return { title, content, priority, url, isError: true }\r\n    }\r\n\r\n    return { title, content, priority, url, isError: false }\r\n  } catch (error) {\r\n    const errorMsg = `Помилка перевірки полів вводу при створенні або редагуванні розділу сторінки: ${error.message}`\r\n\r\n    const setError = (value: string) => {\r\n      return { value, msg: [errorMsg] }\r\n    }\r\n    return {\r\n      title: setError(fields.title),\r\n      content: setError(fields.title),\r\n      priority: setError(fields.title),\r\n      url: setError(fields.title),\r\n      isError: true,\r\n    }\r\n  }\r\n}\r\n","import bcrypt from \"bcryptjs\"\r\nimport { IFieldSnippet, ILengthSnippet } from \"../interfaces\"\r\n\r\nfunction isEmpty(field: IFieldSnippet, msg: string) {\r\n  if (!field.value.trim()) {\r\n    field.msg.push(msg)\r\n  }\r\n  return field\r\n}\r\n\r\nfunction isEmail(field: IFieldSnippet, msg: string) {\r\n  let patern = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g\r\n\r\n  if (!field.value.match(patern)) {\r\n    field.msg.push(msg)\r\n  }\r\n  return field\r\n}\r\n\r\nasync function isUnique(\r\n  field: IFieldSnippet,\r\n  msg: string,\r\n  Model: any,\r\n  prop: string,\r\n  id?: string\r\n) {\r\n  try {\r\n    const query = id\r\n      ? { [prop]: field.value, _id: { $ne: id } }\r\n      : { [prop]: field.value }\r\n\r\n    const collection = await Model.find(query)\r\n\r\n    if (collection.length) {\r\n      field.msg.push(msg)\r\n    }\r\n\r\n    return field\r\n  } catch (error) {\r\n    const errorMsg = `Error isUnique: ${error.message}`\r\n    return { ...field, msg: [errorMsg] }\r\n  }\r\n}\r\n\r\nfunction isLength(\r\n  field: IFieldSnippet,\r\n  { min, max, minMsg, maxMsg }: ILengthSnippet\r\n) {\r\n  if (field.value.length < min) {\r\n    field.msg.push(minMsg)\r\n  } else if (field.value.length > max) {\r\n    field.msg.push(maxMsg)\r\n  }\r\n  return field\r\n}\r\n\r\nasync function isContains(\r\n  field: IFieldSnippet,\r\n  msg: string,\r\n  Model: any,\r\n  prop: string\r\n) {\r\n  try {\r\n    const instance = await Model.findOne({ [prop]: field.value })\r\n    if (!instance) {\r\n      field.msg.push(msg)\r\n    }\r\n    return { instance, field }\r\n  } catch (error) {\r\n    const errorMsg = `Error isContains: ${error.message}`\r\n    return { field: { ...field, msg: [errorMsg] } }\r\n  }\r\n}\r\n\r\nasync function comparePassword(\r\n  password: IFieldSnippet,\r\n  hashedPassword: string,\r\n  msg: string\r\n) {\r\n  try {\r\n    const isValidPass = bcrypt.compareSync(password.value, hashedPassword)\r\n\r\n    if (!isValidPass) {\r\n      password.msg.push(msg)\r\n      return { passwordVerified: password, isSimilar: false }\r\n    }\r\n\r\n    return { passwordVerified: password, isSimilar: true }\r\n  } catch (error) {\r\n    const errorMsg = `Compare password error: ${error.message}`\r\n    return {\r\n      passwordVerified: { value: password.value, msg: [errorMsg] },\r\n      isSimilar: false,\r\n    }\r\n  }\r\n}\r\n\r\nexport { isEmpty, isEmail, isUnique, isContains, isLength, comparePassword }\r\n","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/taggedTemplateLiteral\");","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@sentry/node\");","module.exports = require(\"apollo-server\");","module.exports = require(\"apollo-server-express\");","module.exports = require(\"aws-sdk\");","module.exports = require(\"bcryptjs\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"imagemin\");","module.exports = require(\"imagemin-mozjpeg\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"nodemailer\");","module.exports = require(\"path\");","module.exports = require(\"sharp\");","module.exports = require(\"uuid\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// import express from \"express\"\n// import { ApolloServer, PubSub } from \"apollo-server-express\"\n// import http from \"http\"\n// import path from \"path\"\n// import mongoose from \"mongoose\"\n// import { config } from \"dotenv\"\n// import isAuth from \"./context/isAuth\"\n// import schema from \"./schema\"\n// import cors from \"cors\"\n\n// config()\n// const { PORT, MONGO_USER, MONGO_PASS, MONGO_DB, NODE_ENV } = process.env\n// const isDev = NODE_ENV === \"development\"\n\n// ;(async () => {\n//   try {\n//     const app = express()\n//     app.use(cors())\n\n//     await mongoose.connect(\n//       `mongodb+srv://${MONGO_USER}:${MONGO_PASS}@cluster0.osxef.mongodb.net/${MONGO_DB}?retryWrites=true&w=majority`,\n//       {\n//         useCreateIndex: true,\n//         useNewUrlParser: true,\n//         useUnifiedTopology: true,\n//         useFindAndModify: false,\n//       },\n//       () => console.log(\"MongoDB started successfully!\")\n//     )\n\n//     const pubsub = new PubSub()\n\n//     const server = new ApolloServer({\n//       ...schema,\n//       playground: isDev,\n//       context: ({ req, res }: { req: any; res: any }) => ({\n//         req,\n//         res,\n//         pubsub,\n//         isAuth: isAuth(req),\n//       }),\n//     })\n//     server.applyMiddleware({ app })\n\n//     if (NODE_ENV === \"production\") {\n//       app.use(express.static(path.join(__dirname, \"../\", \"client\")))\n//       app.get(\"/*\", function (req, res) {\n//         res.sendFile(path.join(__dirname, \"../\", \"client\", \"index.html\"))\n//       })\n//     }\n\n//     const httpServer = http.createServer(app)\n//     server.installSubscriptionHandlers(httpServer)\n\n//     httpServer.listen(PORT, () => {\n//       console.log(`🚀 Server ready at http://localhost:${PORT}`)\n//       console.log(\n//         `🚀 Subscriptions ready at ws://localhost:${PORT}${server.subscriptionsPath}`\n//       )\n//     })\n//   } catch (error) {\n//     console.error(`Server error: ${error.message}`)\n//   }\n// })()\n////////////////// apollo-server-express without sockets\nimport express from \"express\";\nimport { ApolloServer } from \"apollo-server-express\";\nimport path from \"path\";\nimport mongoose from \"mongoose\";\nimport { config } from \"dotenv\";\nimport isAuth from \"./context/isAuth\";\nimport schema from \"./schema\";\nimport cors from \"cors\";\n\nconfig();\nconst { PORT, MONGO_URI = \"\", NODE_ENV } = process.env;\nconst isDev = NODE_ENV === \"development\";\n\n(async () => {\n  try {\n    const app = express();\n    app.use(cors());\n\n    await mongoose.connect(\n      MONGO_URI,\n      {\n        useCreateIndex: true,\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n        useFindAndModify: false,\n      },\n      () => console.log(\"MongoDB started successfully!\")\n    );\n\n    const server = new ApolloServer({\n      ...schema,\n      playground: isDev,\n      context: ({ req, res }: { req: any; res: any }) => ({\n        req,\n        res,\n        isAuth: isAuth(req),\n      }),\n    });\n    server.applyMiddleware({ app });\n\n    if (!isDev) {\n      app.use(express.static(path.join(__dirname, \"../\", \"client\")));\n      app.get(\"/*\", function (req, res) {\n        res.sendFile(path.join(__dirname, \"../\", \"client\", \"index.html\"));\n      });\n    }\n\n    app.listen(PORT, () => console.log(`Server started on port: ${PORT}`));\n  } catch (error) {\n    console.error(`Server error: ${error.message}`);\n  }\n})();\n\n///////////////////////////////////////// apollo-server\n// import { ApolloServer } from \"apollo-server\"\n// import mongoose from \"mongoose\"\n// import { config } from \"dotenv\"\n// import isAuth from \"./context/isAuth\"\n// import schema from \"./schema\"\n// import path from \"path\"\n\n// config()\n// const { PORT, MONGO_USER, MONGO_PASS, MONGO_DB, NODE_ENV } = process.env\n// const isDev = NODE_ENV === \"development\"\n\n// ;(async () => {\n//   try {\n//     await mongoose.connect(\n//       `mongodb+srv://${MONGO_USER}:${MONGO_PASS}@cluster0.osxef.mongodb.net/${MONGO_DB}?retryWrites=true&w=majority`,\n//       {\n//         useCreateIndex: true,\n//         useNewUrlParser: true,\n//         useUnifiedTopology: true,\n//         useFindAndModify: false,\n//       },\n//       () => console.log(\"MongoDB started successfully!\")\n//     )\n\n//     const server = new ApolloServer({\n//       ...schema,\n//       playground: true,\n//       context: ({ req, res }: { req: any; res: any }) => ({\n//         req,\n//         res,\n//         isAuth: isAuth(req),\n//       }),\n//     })\n\n//     // if (NODE_ENV === \"production\") {\n//     //   app.use(express.static(path.join(__dirname, \"../\", \"client\")))\n//     //   app.get(\"/*\", function (req, res) {\n//     //     res.sendFile(path.join(__dirname, \"../\", \"client\", \"index.html\"))\n//     //   })\n//     // }\n\n//     server.listen({ port: PORT }).then(({ url }) => {\n//       console.log(`Server started on url: ${url}`)\n//     })\n//   } catch (error) {\n//     console.error(`Server error: ${error.message}`)\n//   }\n// })()\n"],"sourceRoot":""}